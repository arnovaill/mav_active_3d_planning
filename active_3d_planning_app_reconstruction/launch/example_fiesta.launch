<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>
  
  <!-- Unreal Routine arguments -->
  <arg name="uecv_mode" default="fast"/>
  <arg name="slowdown" default="0.0"/>
  <arg name="delay" default="3.0"/>  
  
  <!-- Unreal Sensor arguments (ground_truth, kinect, gaussian_depth_noise) -->
  <arg name="model_type" default="ground_truth"/> <!-- default= gaussian_depth_noise MODIF ARNO -->
  <arg name="flatten_distance" default="6.0"/>
  <arg name="maximum_distance" default="0.0"/>
  
  <!-- Odometry  arguments (random_walk, ground_truth) -->
  <arg name="odom_noise_model" default="ground_truth"/> 
  
  <!--  Planner arguments-->
  <arg name="planner_config" default="planners/example_config.yaml"/> 
  <!-- <arg name="planner_config" default="planners/lukas_planner.yaml"/>  -->
  
  <!--  Experiment arguments -->  
  <arg name="experiment_config" default="CityBuilding.yaml"/>
  
  <!-- *** Run the Simulation *** -->
  <!-- Load experiment config -->
  <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/experiments/$(arg experiment_config)"/>

  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find unreal_cv_ros)/content/gazebo_empty.world" />
    <arg name="debug" value="false" />
    <arg name="paused" value="true" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
  </include>

  <group ns="$(arg mav_name)">
    <!-- Setup a mav -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="0" />
    </include>
    
    <!-- MPC trajectory tracker (0.0021 sampling time needs to match odom publish rate!)-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.0021"/>
    </node>
    
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- Odometry: noise model NOT VITAL FOR THIS WORK-->
    <!-- <node name="odometry_noise_model" pkg="active_3d_planning_app_reconstruction" type="gps_odometry_simulator.py" output="screen">
      <param name="position_uncertainty" value="0.05"/>
      <param name="roll_pitch_uncertainty" value="1.5" />
      <param name="yaw_uncertainty" value="5.0" />
      <param name="noise_model" value="$(arg odom_noise_model)" />
      <param name="publish_tf" value="true" />
      <remap from="odometry_in" to="ground_truth/odometry" />
    </node>  -->

    <!-- static camera transform (500Hz = every 2ms) ORIGINALLY from camera_link but slower (50hz instead 500Hz)!-->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /firefly/base_link /camera 2"/>  
  </group>

  <group ns="unreal">
    <!-- Unreal vision client -->
    <node name="unreal_ros_client" pkg="unreal_cv_ros" type="unreal_ros_client.py" required="true" output="screen">
      <param name="mode" value="$(arg uecv_mode)"/>
      <param name="publish_tf" value="true"/>
      <param name="collision_on" value="true"/>
      <param name="slowdown" value="$(arg slowdown)"/>
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
    </node>
    
    <!-- Unreal sensor model -->
    <node name="unreal_sensor_model" pkg="unreal_cv_ros" type="sensor_model.py" output="screen">
      <param name="camera_params_ns" value="/unreal/unreal_ros_client/camera_params"/>
      <param name="flatten_distance" value="$(arg flatten_distance)"/>
      <param name="model_type" value="$(arg model_type)" />
      <param name="maximum_distance" value="$(arg maximum_distance)" />
      <param name="k_mu_2" value="0.0024" />
      <param name="k_sigma_2" value="0.0024" />
      <remap from="ue_sensor_raw" to="unreal_ros_client/ue_sensor_raw" />
    </node>

    <!-- Simulation manager for launching the MAV and monitoring -->
    <node name="simulation_manager" pkg="unreal_cv_ros" type="simulation_manager.py" output="screen">
      <param name="ns_mav" value="/$(arg mav_name)" />
      <param name="ns_gazebo" value="/gazebo" />
      <param name="monitor" value="true" />
      <param name="horizon" value="20" />
      <remap from="ue_raw_in" to="unreal_ros_client/ue_sensor_raw" />
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
    </node>
    
    <!-- Experiment launcher -->
    <node name="eval_data_node" pkg="active_3d_planning_app_reconstruction" type="eval_data_node.py" output="screen" required="true">
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
      <remap from="unreal_simulation_ready" to="simulation_manager/simulation_ready" />
      <remap from="collision" to="unreal_ros_client/collision" />
      <param name="ns_planner" value="/planner/planner_node" />
      <param name="ns_voxblox" value="/planner/voxblox_node" />
      <param name="delay" value="$(arg delay)" />
      <param name="startup_timeout" value="30.0" />
      <param name="evaluate" value="false" />
    </node>
  </group>
  
  <group ns="planner">
    
    <!-- Planner -->
    <node name="planner_node" pkg="active_3d_planning_app_reconstruction" type="reconstruction_planner_node" output="screen" launch-prefix="gdb -ex run --args">
    
    	<!-- General Settings -->
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />

      <!-- Build the Planner by Configuration     -->
      <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/$(arg planner_config)"/>

      <!-- Remapping of sensor and position topics-->  
      <remap from="/planner/planner_node/map/depth" to="/unreal/unreal_sensor_model/ue_sensor_out"/>
      <remap from="/planner/planner_node/map/transform" to="/firefly/odometry_sensor1/transform"/> 

      <!-- Remap completion topic  -->
      <!-- <remap from="/planner/planner_node/map/ssc" to="/ssc/prediction"/>  -->

    </node>    

  <!-- <node pkg="tf" type="static_transform_publisher" name="bottom_aligned_broadcaster" args="0 0 -0.5 0.3490658503988659 0 0 world bottom_aligned 100" /> -->

  </group>

  <!-- Semantic Scene completion -->
  <param name="my_integer" type="int" value="7" />
  <param name="my_float" type="double" value="3.14" />
  <param name="my_string" type="str" value="hello" />
  <!-- <node name="ssc" pkg="ssc" type="ssc.py" output="screen">
  </node>     -->


  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find active_3d_planning_app_reconstruction)/cfg/experiments/experiment_visualization.rviz"/>
</launch>
